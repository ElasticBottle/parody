/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as DashboardTeamNameIndexImport } from './routes/dashboard/$teamName/index'
import { Route as DashboardTeamNameProjectNameIndexImport } from './routes/dashboard/$teamName/$projectName/index'
import { Route as DashboardTeamNameProjectNamePlaygroundImport } from './routes/dashboard/$teamName/$projectName/playground'
import { Route as DashboardTeamNameProjectNameApiKeyImport } from './routes/dashboard/$teamName/$projectName/api-key'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const DashboardIndexRoute = DashboardIndexImport.update({
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardTeamNameIndexRoute = DashboardTeamNameIndexImport.update({
  path: '/$teamName/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardTeamNameProjectNameIndexRoute =
  DashboardTeamNameProjectNameIndexImport.update({
    path: '/$teamName/$projectName/',
    getParentRoute: () => DashboardRoute,
  } as any)

const DashboardTeamNameProjectNamePlaygroundRoute =
  DashboardTeamNameProjectNamePlaygroundImport.update({
    path: '/$teamName/$projectName/playground',
    getParentRoute: () => DashboardRoute,
  } as any)

const DashboardTeamNameProjectNameApiKeyRoute =
  DashboardTeamNameProjectNameApiKeyImport.update({
    path: '/$teamName/$projectName/api-key',
    getParentRoute: () => DashboardRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/$teamName/': {
      id: '/dashboard/$teamName/'
      path: '/$teamName'
      fullPath: '/dashboard/$teamName'
      preLoaderRoute: typeof DashboardTeamNameIndexImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/$teamName/$projectName/api-key': {
      id: '/dashboard/$teamName/$projectName/api-key'
      path: '/$teamName/$projectName/api-key'
      fullPath: '/dashboard/$teamName/$projectName/api-key'
      preLoaderRoute: typeof DashboardTeamNameProjectNameApiKeyImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/$teamName/$projectName/playground': {
      id: '/dashboard/$teamName/$projectName/playground'
      path: '/$teamName/$projectName/playground'
      fullPath: '/dashboard/$teamName/$projectName/playground'
      preLoaderRoute: typeof DashboardTeamNameProjectNamePlaygroundImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/$teamName/$projectName/': {
      id: '/dashboard/$teamName/$projectName/'
      path: '/$teamName/$projectName'
      fullPath: '/dashboard/$teamName/$projectName'
      preLoaderRoute: typeof DashboardTeamNameProjectNameIndexImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardTeamNameIndexRoute: typeof DashboardTeamNameIndexRoute
  DashboardTeamNameProjectNameApiKeyRoute: typeof DashboardTeamNameProjectNameApiKeyRoute
  DashboardTeamNameProjectNamePlaygroundRoute: typeof DashboardTeamNameProjectNamePlaygroundRoute
  DashboardTeamNameProjectNameIndexRoute: typeof DashboardTeamNameProjectNameIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardTeamNameIndexRoute: DashboardTeamNameIndexRoute,
  DashboardTeamNameProjectNameApiKeyRoute:
    DashboardTeamNameProjectNameApiKeyRoute,
  DashboardTeamNameProjectNamePlaygroundRoute:
    DashboardTeamNameProjectNamePlaygroundRoute,
  DashboardTeamNameProjectNameIndexRoute:
    DashboardTeamNameProjectNameIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/$teamName': typeof DashboardTeamNameIndexRoute
  '/dashboard/$teamName/$projectName/api-key': typeof DashboardTeamNameProjectNameApiKeyRoute
  '/dashboard/$teamName/$projectName/playground': typeof DashboardTeamNameProjectNamePlaygroundRoute
  '/dashboard/$teamName/$projectName': typeof DashboardTeamNameProjectNameIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/$teamName': typeof DashboardTeamNameIndexRoute
  '/dashboard/$teamName/$projectName/api-key': typeof DashboardTeamNameProjectNameApiKeyRoute
  '/dashboard/$teamName/$projectName/playground': typeof DashboardTeamNameProjectNamePlaygroundRoute
  '/dashboard/$teamName/$projectName': typeof DashboardTeamNameProjectNameIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/$teamName/': typeof DashboardTeamNameIndexRoute
  '/dashboard/$teamName/$projectName/api-key': typeof DashboardTeamNameProjectNameApiKeyRoute
  '/dashboard/$teamName/$projectName/playground': typeof DashboardTeamNameProjectNamePlaygroundRoute
  '/dashboard/$teamName/$projectName/': typeof DashboardTeamNameProjectNameIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/dashboard/'
    | '/dashboard/$teamName'
    | '/dashboard/$teamName/$projectName/api-key'
    | '/dashboard/$teamName/$projectName/playground'
    | '/dashboard/$teamName/$projectName'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/dashboard'
    | '/dashboard/$teamName'
    | '/dashboard/$teamName/$projectName/api-key'
    | '/dashboard/$teamName/$projectName/playground'
    | '/dashboard/$teamName/$projectName'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/login'
    | '/dashboard/'
    | '/dashboard/$teamName/'
    | '/dashboard/$teamName/$projectName/api-key'
    | '/dashboard/$teamName/$projectName/playground'
    | '/dashboard/$teamName/$projectName/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  DashboardRoute: DashboardRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/",
        "/dashboard/$teamName/",
        "/dashboard/$teamName/$projectName/api-key",
        "/dashboard/$teamName/$projectName/playground",
        "/dashboard/$teamName/$projectName/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/$teamName/": {
      "filePath": "dashboard/$teamName/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/$teamName/$projectName/api-key": {
      "filePath": "dashboard/$teamName/$projectName/api-key.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/$teamName/$projectName/playground": {
      "filePath": "dashboard/$teamName/$projectName/playground.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/$teamName/$projectName/": {
      "filePath": "dashboard/$teamName/$projectName/index.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
