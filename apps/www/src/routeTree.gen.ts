/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProductImport } from './routes/product'
import { Route as LoginImport } from './routes/login'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as ProductPhotoImport } from './routes/product.photo'
import { Route as ProductNameImport } from './routes/product.name'
import { Route as DashboardTeamNameImport } from './routes/dashboard/$teamName'
import { Route as DashboardTeamNameProjectNameImport } from './routes/dashboard/$teamName/$projectName'
import { Route as DashboardTeamNameProjectNameUserImport } from './routes/dashboard/$teamName/$projectName/user'
import { Route as DashboardTeamNameProjectNameApiKeyImport } from './routes/dashboard/$teamName/$projectName/api-key'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const ProductRoute = ProductImport.update({
  path: '/product',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ProductPhotoRoute = ProductPhotoImport.update({
  path: '/photo',
  getParentRoute: () => ProductRoute,
} as any)

const ProductNameRoute = ProductNameImport.update({
  path: '/name',
  getParentRoute: () => ProductRoute,
} as any)

const DashboardTeamNameRoute = DashboardTeamNameImport.update({
  path: '/$teamName',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardTeamNameProjectNameRoute =
  DashboardTeamNameProjectNameImport.update({
    path: '/$projectName',
    getParentRoute: () => DashboardTeamNameRoute,
  } as any)

const DashboardTeamNameProjectNameUserRoute =
  DashboardTeamNameProjectNameUserImport.update({
    path: '/user',
    getParentRoute: () => DashboardTeamNameProjectNameRoute,
  } as any)

const DashboardTeamNameProjectNameApiKeyRoute =
  DashboardTeamNameProjectNameApiKeyImport.update({
    path: '/api-key',
    getParentRoute: () => DashboardTeamNameProjectNameRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/product': {
      id: '/product'
      path: '/product'
      fullPath: '/product'
      preLoaderRoute: typeof ProductImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/$teamName': {
      id: '/dashboard/$teamName'
      path: '/$teamName'
      fullPath: '/dashboard/$teamName'
      preLoaderRoute: typeof DashboardTeamNameImport
      parentRoute: typeof DashboardImport
    }
    '/product/name': {
      id: '/product/name'
      path: '/name'
      fullPath: '/product/name'
      preLoaderRoute: typeof ProductNameImport
      parentRoute: typeof ProductImport
    }
    '/product/photo': {
      id: '/product/photo'
      path: '/photo'
      fullPath: '/product/photo'
      preLoaderRoute: typeof ProductPhotoImport
      parentRoute: typeof ProductImport
    }
    '/dashboard/$teamName/$projectName': {
      id: '/dashboard/$teamName/$projectName'
      path: '/$projectName'
      fullPath: '/dashboard/$teamName/$projectName'
      preLoaderRoute: typeof DashboardTeamNameProjectNameImport
      parentRoute: typeof DashboardTeamNameImport
    }
    '/dashboard/$teamName/$projectName/api-key': {
      id: '/dashboard/$teamName/$projectName/api-key'
      path: '/api-key'
      fullPath: '/dashboard/$teamName/$projectName/api-key'
      preLoaderRoute: typeof DashboardTeamNameProjectNameApiKeyImport
      parentRoute: typeof DashboardTeamNameProjectNameImport
    }
    '/dashboard/$teamName/$projectName/user': {
      id: '/dashboard/$teamName/$projectName/user'
      path: '/user'
      fullPath: '/dashboard/$teamName/$projectName/user'
      preLoaderRoute: typeof DashboardTeamNameProjectNameUserImport
      parentRoute: typeof DashboardTeamNameProjectNameImport
    }
  }
}

// Create and export the route tree

interface DashboardTeamNameProjectNameRouteChildren {
  DashboardTeamNameProjectNameApiKeyRoute: typeof DashboardTeamNameProjectNameApiKeyRoute
  DashboardTeamNameProjectNameUserRoute: typeof DashboardTeamNameProjectNameUserRoute
}

const DashboardTeamNameProjectNameRouteChildren: DashboardTeamNameProjectNameRouteChildren =
  {
    DashboardTeamNameProjectNameApiKeyRoute:
      DashboardTeamNameProjectNameApiKeyRoute,
    DashboardTeamNameProjectNameUserRoute:
      DashboardTeamNameProjectNameUserRoute,
  }

const DashboardTeamNameProjectNameRouteWithChildren =
  DashboardTeamNameProjectNameRoute._addFileChildren(
    DashboardTeamNameProjectNameRouteChildren,
  )

interface DashboardTeamNameRouteChildren {
  DashboardTeamNameProjectNameRoute: typeof DashboardTeamNameProjectNameRouteWithChildren
}

const DashboardTeamNameRouteChildren: DashboardTeamNameRouteChildren = {
  DashboardTeamNameProjectNameRoute:
    DashboardTeamNameProjectNameRouteWithChildren,
}

const DashboardTeamNameRouteWithChildren =
  DashboardTeamNameRoute._addFileChildren(DashboardTeamNameRouteChildren)

interface DashboardRouteChildren {
  DashboardTeamNameRoute: typeof DashboardTeamNameRouteWithChildren
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardTeamNameRoute: DashboardTeamNameRouteWithChildren,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

interface ProductRouteChildren {
  ProductNameRoute: typeof ProductNameRoute
  ProductPhotoRoute: typeof ProductPhotoRoute
}

const ProductRouteChildren: ProductRouteChildren = {
  ProductNameRoute: ProductNameRoute,
  ProductPhotoRoute: ProductPhotoRoute,
}

const ProductRouteWithChildren =
  ProductRoute._addFileChildren(ProductRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRoute
  '/product': typeof ProductRouteWithChildren
  '/dashboard/$teamName': typeof DashboardTeamNameRouteWithChildren
  '/product/name': typeof ProductNameRoute
  '/product/photo': typeof ProductPhotoRoute
  '/dashboard/$teamName/$projectName': typeof DashboardTeamNameProjectNameRouteWithChildren
  '/dashboard/$teamName/$projectName/api-key': typeof DashboardTeamNameProjectNameApiKeyRoute
  '/dashboard/$teamName/$projectName/user': typeof DashboardTeamNameProjectNameUserRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRoute
  '/product': typeof ProductRouteWithChildren
  '/dashboard/$teamName': typeof DashboardTeamNameRouteWithChildren
  '/product/name': typeof ProductNameRoute
  '/product/photo': typeof ProductPhotoRoute
  '/dashboard/$teamName/$projectName': typeof DashboardTeamNameProjectNameRouteWithChildren
  '/dashboard/$teamName/$projectName/api-key': typeof DashboardTeamNameProjectNameApiKeyRoute
  '/dashboard/$teamName/$projectName/user': typeof DashboardTeamNameProjectNameUserRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRoute
  '/product': typeof ProductRouteWithChildren
  '/dashboard/$teamName': typeof DashboardTeamNameRouteWithChildren
  '/product/name': typeof ProductNameRoute
  '/product/photo': typeof ProductPhotoRoute
  '/dashboard/$teamName/$projectName': typeof DashboardTeamNameProjectNameRouteWithChildren
  '/dashboard/$teamName/$projectName/api-key': typeof DashboardTeamNameProjectNameApiKeyRoute
  '/dashboard/$teamName/$projectName/user': typeof DashboardTeamNameProjectNameUserRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/product'
    | '/dashboard/$teamName'
    | '/product/name'
    | '/product/photo'
    | '/dashboard/$teamName/$projectName'
    | '/dashboard/$teamName/$projectName/api-key'
    | '/dashboard/$teamName/$projectName/user'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/login'
    | '/product'
    | '/dashboard/$teamName'
    | '/product/name'
    | '/product/photo'
    | '/dashboard/$teamName/$projectName'
    | '/dashboard/$teamName/$projectName/api-key'
    | '/dashboard/$teamName/$projectName/user'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/login'
    | '/product'
    | '/dashboard/$teamName'
    | '/product/name'
    | '/product/photo'
    | '/dashboard/$teamName/$projectName'
    | '/dashboard/$teamName/$projectName/api-key'
    | '/dashboard/$teamName/$projectName/user'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  LoginRoute: typeof LoginRoute
  ProductRoute: typeof ProductRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  DashboardRoute: DashboardRouteWithChildren,
  LoginRoute: LoginRoute,
  ProductRoute: ProductRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/login",
        "/product"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/$teamName"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/product": {
      "filePath": "product.tsx",
      "children": [
        "/product/name",
        "/product/photo"
      ]
    },
    "/dashboard/$teamName": {
      "filePath": "dashboard/$teamName.tsx",
      "parent": "/dashboard",
      "children": [
        "/dashboard/$teamName/$projectName"
      ]
    },
    "/product/name": {
      "filePath": "product.name.tsx",
      "parent": "/product"
    },
    "/product/photo": {
      "filePath": "product.photo.tsx",
      "parent": "/product"
    },
    "/dashboard/$teamName/$projectName": {
      "filePath": "dashboard/$teamName/$projectName.tsx",
      "parent": "/dashboard/$teamName",
      "children": [
        "/dashboard/$teamName/$projectName/api-key",
        "/dashboard/$teamName/$projectName/user"
      ]
    },
    "/dashboard/$teamName/$projectName/api-key": {
      "filePath": "dashboard/$teamName/$projectName/api-key.tsx",
      "parent": "/dashboard/$teamName/$projectName"
    },
    "/dashboard/$teamName/$projectName/user": {
      "filePath": "dashboard/$teamName/$projectName/user.tsx",
      "parent": "/dashboard/$teamName/$projectName"
    }
  }
}
ROUTE_MANIFEST_END */
